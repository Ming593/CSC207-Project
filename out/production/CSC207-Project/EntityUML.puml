@startuml
'https://plantuml.com/class-diagram



package "entity" {

package "user" {
class AppUser {
-username : String
-password : String
-address : String
-bio: String
-fav    Pet: List<PetProfile>
-roles: List<String>
-myPet: List<PetProfile>
}
class "AppUserFactory"{
+createAppUser(String username, String password, String address): AppUser
}


}



package "GeoCoordinates" {

class GeoCoordinate{
~lat: double
~lng: double
}
class GeoLocationFinder{
- final context: GeoApiContext
- closeConnectonToGoogleMap
- getAddressGeoCoordinaate(String address): GeoCoordinate

}
class GeoCoordinatesCalculator{
- final EARTHR: double
- calculateDistance(GeoCoordinate g1, GeoCoordinate g2): double
}

class GeoCoordinateCentralProcessor{
- final finder: GeoLocationFinder
- final dcalculator: GeoCoordinatesCalculator
-  getAddressGeoCoordinate(String address): GeoCoordinate
- calculateDistance(GeoCoordinate g1, GeoCoordinate g2): double
+ calculateDistanceBetweenAddress(String address1, String address2): double
+ closeConnectionToGoogleMap(): void
}
GeoCoordinateCentralProcessor *-- GeoCoordinatesCalculator

 GeoCoordinateCentralProcessor  *-- GeoLocationFinder
 GeoCoordinateCentralProcessor ..> GeoCoordinate
  GeoCoordinatesCalculator ..> GeoCoordinate
  GeoLocationFinder ..> GeoApiContext
}





package "profile"{

abstract class PetProfile {
-name : String
-age : int
-sex : bool
-final species: String
-size: char
-petPhotoLink : String
-morePhotos: List<String>
-petOwnerName: String
-generalDescr : String
-likeDescr : String
-temperDescr : String

-isPublic : bool

--
getters: all private var
setters: all private var except species
--
# PetProfile(PetProfileBuilder<? extends PetProfileBuilder<?,?>, ? extends PetProfile> builder)
}

class DogProfile extends PetProfile{
-neuter: boolean
-vaccinated: boolean
-breed: breed
--
getter/setters: all private instance variables
--
+DogProfile(DogProfileBuilder builder)
}

class PetProfileBuilder<T extends PetProfileBuilder<T,P>, P extends PetProfile>{
~name : String
~age : int
~sex : bool
~specie: String = "dog"
~size: char
~petPhotoLink : String
~MorePhotos: Arraylist0
~petOwner: String
~generalDescr : String
~likeDescr : String
~temperDescr : String
+PetProfileBuilder(String petOwnerName): PetProfileBuilder
+abstract build: P
-self(): T
+withName(String name): T
+withSize(char size): T
+withAge(int age): T
+withSex(char sex): T
+withPetPhoto(String path): T
+withMorePhotos(List<String> morePhotoPaths)" T
+withTemperDescr(String descr): T
+withLikedDescr(String descr): T
+withGeneralDescr(String descr): T



}

class DogProfileBuilder extends PetProfileBuilder{
~neuter: boolean
~vaccinated: boolean
~breed: String
+DogProfileBuilder(String petOwnerName): DogProfileBuilder
+build(): DogProfile
+withBreed(): DogProfileBuilder
+vaccinated(): DogProfileBuilder
+neutered(): DogProfileBuilder
}
class DogProfileBuilderFactory{
+createDogProfile(String petOwnerName): DogProfileBuilder
}
DogProfile  ..> DogProfileBuilder

}





package "recommendation"{
interface Recommendable<T> extends java.util.List{
-hasNext: boolean
-retrieveNextAndUpdate: T

}

class PetProfileRec<Petprofile> implements Recommendable{
-hasNext: boolean
-retrieveNextAndUpdate: PetProfile
}

class DogProfileRec<DogProfile> implements Recommendable{
-hasNext: boolean
-retrieveNextAndUpdate: DogProfile
}

interface RecBuilder<T>{
build(List<T>: info): Recommendable<T>
void add(RecStrategy strat)
}
class PetProfileRecBuilder<PetProfile> implements RecBuilder{
-strategies: List<PetStrategy>
void add(RecStrategy strat)
build(List<PetProfile>: petProfiles): Recommendable<PetProfile>

}
class DogProfileRecBuilder<DogProfile> implements RecBuilder{
-strategies: List<RecStrategy>
void add(RecStrategy strat)
build((List<DogProfile>: dogProfiles)):Recommendable<DogProfile>
}

}

package "strategy"{
interface RecStrategy{
retrieveStrategy(Comparator: strat)
}

interface PetStrategy extends RecStrategy{
}
class DefaultStrategy implements PetStrategy{
private defaultComparator: comparator
}
class SexStrategy implements PetStrategy{}
class SizeStrategy implements PetStrategy{}

interface DogStrategy extends RecStrategy{
}
class BreedStrategy implements DogStrategy{}
class VaccineStrategy implements DogStrategy{}
class NeuterStrategy implements DogStrategy{}

}
package "comparator"{
interface java.lang.Comparator{
+compare(T: o1, T: o2): int
+thenComparing(comparator: Comparator)
}

abstract class ProfileComparator <<entity>> implements java.lang.Comparator{
+compare(PetProfile: p1, PetProfile P2): int
}
class ProfileComparatorByGeoCoord <<entity>> extends ProfileComparator{
+compare(PetProfile: p1, PetProfile p2): int
+thenComparing(comparator: Comparator<petProfile>): Comparator
}


class DogProfileComparator<<entity>> extends  ProfileComparator{
+compare(DogProfile: p1, DogProfile p2): int
+thenComparing(comparator: Comparator<DogPrfofile>)
}
class DogProfileComparatorByVaccined<<entity>> extends DogProfileComparator{
+compare(DogProfile: p1, DogProfile p2): int
+thenComparing(comparator: Comparator<DogPrfofile>)
}
class DogProfileComparatorBySex<<entity>> extends DogProfileComparator{
+compare(DogProfile: p1, DogProfile p2): int
+thenComparing(comparator: Comparator<DogPrfofile>)
}
class DogProfileComparatorByAge<<entity>> extends DogProfileComparator{
+compare(DogProfile: p1, DogProfile p2): int
+thenComparing(comparator: Comparator<DogPrfofile>)
}
class DogProfileComparatorBySize<<entity>> extends DogProfileComparator{
+compare(DogProfile: p1, DogProfile p2): int
+thenComparing(comparator: Comparator<DogPrfofile>)
}
}

}

@enduml

